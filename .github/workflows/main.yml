name: Deploy to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-west-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECS_CLUSTER_NAME: my-ecs-cluster
  ECS_SERVICE_NAME: my-ecs-service
  DOCKERHUB_REPOSITORY_NAME: zivlederer/artac-app
  DOCKERHUB_USERNAME: zivlederer
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Login to Dockerhub
        run: echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t $DOCKERHUB_REPOSITORY_NAME ./app
          docker push $DOCKERHUB_REPOSITORY_NAME

      - name: Check if S3 bucket for backend already exists
        id: check-s3
        run: |
          bucket_name="artac-terraform-state1"
          if aws s3 ls "s3://$bucket_name" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Bucket does not exist."
            echo "::set-output name=exists::false"
          else
            echo "Bucket already exists."
            echo "::set-output name=exists::true"
          fi
    
      - name: Create S3 bucket if not exists
        if: steps.check-s3.outputs.exists == 'false'
        run: |
          bucket_name="artac-terraform-state1"
          aws s3api create-bucket --bucket $bucket_name --region your-aws-region --create-bucket-configuration LocationConstraint=your-aws-region

      - name: Terraform Init
        id: init
        run: |
          terraform fmt
          terraform init -upgrade

      - name: Terraform apply
        run: terraform apply -auto-approve

      - name: Update ECS service
        run: aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
